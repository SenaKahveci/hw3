import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import pandas as pd
sns.set()

hw = pd.read_csv('HW3.txt')
hw.columns = ["day", "time", "open", "high", "low", "close", "volume" ]
hw.head()

signal = np.copy(hw.Close.values)

def moving_average(signal, period):
    buffer = []
    for i in range(period, len(signal)):
        buffer.append(signal[i - period : i].mean())
    return buffer

def auto_regressive(signal, p, d, q, future_count = 1):
    """
    p = the order (number of time lags)
    d = degree of differencing
    q = the order of the moving-average
    """
    buffer = np.copy(signal).tolist()
    for i in range(future_count):
        ma = moving_average(np.array(buffer[-p:]), q)
        forecast = buffer[-1]
        for n in range(0, len(ma), d):
            forecast -= buffer[-1 - n] - ma[n]
        buffer.append(forecast)
    return buffer

future_count = 1

predicted_1 = auto_regressive(signal,1,1,2,future_count)
predicted_1441 = auto_regressive(signal,1441,1,2,future_count)

plt.figure(figsize=(15, 7))
plt.plot(signal, label = 'HW')
plt.plot(predicted_1, label = 'ARIMA 1 MA')
plt.plot(predicted_1441, label = 'ARIMA 1441 MA')
plt.legend()
plt.show()
plt.savefig('hw3.1.png')


std_signal = (signal - np.mean(signal)) / np.std(signal)

def detect(signal, treshold = 2.0):
    detected = []
    for i in range(len(signal)):
        if np.abs(signal[i]) > treshold:
           detected.append(i)
    return detected

outliers = detect(std_signal)

plt.figure(figsize=(15, 7))
plt.plot(np.arange(len(hw.Close)), hw.Close)
plt.plot(np.arange(len(hw.Close)), hw.Close, 'X', label='outliers',markevery=outliers, c='r')
plt.legend()
plt.show()
plt.savefig('outliers.png')


def removal(signal, repeat):
    copy_signal = np.copy(signal)
    for j in range(repeat):
        for i in range(3, len(signal)):
            copy_signal[i - 1] = (copy_signal[i - 2] + copy_signal[i]) / 2
    return copy_signal

def get(original_signal, removed_signal):
    buffer = []
    for i in range(len(removed_signal)):
        buffer.append(original_signal[i] - removed_signal[i])
    return np.array(buffer)

removed_signal = removal(signal, 30)
noise = get(signal, removed_signal)

plt.figure(figsize=(15, 7))
plt.subplot(2, 1, 1)
plt.plot(removed_signal)
plt.title('timeseries without noise')
plt.subplot(2, 1, 2)
plt.plot(noise)
plt.title('noise timeseries')
plt.show()
plt.savefig('withoutnoise.png')

import statsmodels
import statsmodels.api as sm
from statsmodels.tsa.stattools import coint, adfuller

def anchor(signal, weight):
    buffer = []
    last = signal[0]
    for i in signal:
        smoothed_val = last * weight + (1 - weight) * i
        buffer.append(smoothed_val)
        last = smoothed_val
    return buffer

anchor_3 = anchor(signal, 0.3)
anchor_5 = anchor(signal, 0.5)
anchor_8 = anchor(signal, 0.8)

plt.figure(figsize=(15, 7))
plt.plot(np.arange(len(hw.Close)), hw.Close, label = 'close hw')
plt.plot(np.arange(len(hw.Close)), anchor_3, label = 'anchor 0.3 hw')
plt.plot(np.arange(len(hw.Close)), anchor_5, label = 'anchor 0.5 hw')
plt.plot(np.arange(len(hw.Close)), anchor_8, label = 'anchor 0.8 hw')
plt.legend()
plt.show()
plt.savefig('smooth.png')

def linear_weight_moving_average(signal, period):
    buffer = [np.nan] * period
    for i in range(period, len(signal)):
        buffer.append(
            (signal[i - period : i] * (np.arange(period) + 1)).sum()
            / (np.arange(period) + 1).sum()
            )
    return buffer

lw_ma_7  = linear_weight_moving_average(signal, 7)
lw_ma_14 = linear_weight_moving_average(signal, 14)
lw_ma_21 = linear_weight_moving_average(signal, 21)
lw_ma_40 = linear_weight_moving_average(signal, 40)

plt.figure(figsize=(15, 7))
plt.plot(np.arange(len(hw.Close)), hw.Close, label ='close hw')
plt.plot(np.arange(len(hw.Close)), lw_ma_7, label  =  'lw ma 7')
plt.plot(np.arange(len(hw.Close)), lw_ma_14, label = 'lw ma 14')
plt.plot(np.arange(len(hw.Close)), lw_ma_21, label = 'lw ma 21')
plt.plot(np.arange(len(hw.Close)), lw_ma_40, label = 'lw ma 40')
plt.legend()
plt.show()
plt.savefig('lw.png')

from sklearn.metrics import mean_squared_error
from math import sqrt
rms = sqrt(mean_squared_error(hw.Close, naive))
print(rms)

rms = sqrt(mean_squared_error(hw.Close, moving_avg))
print(rms)
